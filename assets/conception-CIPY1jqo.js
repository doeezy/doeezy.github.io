const r=`---\r
title: 개념\r
date: 2025-06-16\r
tags:\r
  - javascript\r
  - frontend\r
---\r
\r
### JavaScript가 뭔데?\r
\r
---\r
\r
웹 브라우저에서 동작하는 스크립트 언어\r
\r
원래는 브라우저에서만 돌았는데 node.js 덕분에 백엔드나 데스크탑 앱까지 가능해짐\r
\r
인터프리터 언어 즉 컴파일 안해도 바로 실행됨\r
\r
[특징]\r
\r
- 동적 타입(타입이 유연함)\r
- 함수가 일급 객체 (함수를 변수에 넣거나 파라미터로 전달 가능함)\r
- 비동기 처리 (Promise, async/await)\r
- 싱글 스레드지만 논블로킹 I/O\r
\r
<br />\r
\r
📌\`인터프리터 언어\`\r
\r
---\r
\r
한 줄씩 바로 실행하는 언어.\r
\r
코드를 통째로 기계어로 바꾸는게 아니라 **실행할 때 한 줄씩 읽고 해석해서 실행함**\r
\r
|  | 컴파일 언어 | 인터프리터 언어 |\r
| --- | --- | --- |\r
| 예시 | C, C++, Java | JS, Python |\r
| 실행 전 처리 | 전체 코드를 기계어로 "컴파일" | 코드 한 줄씩 바로 실행 |\r
| 실행 속도 | 빠름 (기계어라서) | 느릴 수 있음 (해석하면서 실행하니까) |\r
| 실행 방식 | \`.exe\` 같은 실행 파일 만들어서 돌림 | 소스 코드를 직접 실행 |\r
| 디버깅 | 에러 전부 한 번에 확인 | 실행하다가 에러 만나면 거기서 멈춤 |\r
\r
<br />\r
\r
🎃 \`JS는 왜 인터프리터 언어임?\`\r
\r
---\r
\r
브라우저가 JS 코드를 그 자리에서 해석하며 실행함\r
\r
굳이 빌드 안해도 \`<script>\` 안에 넣으면 동작함\r
\r
인터프리터 언어는 한 줄씩 해석하며 실행하기 때문에 원래 느림. 컴파일 언어에 비해 속도에서 밀림\r
\r
근데 JIS(Just-In-Time) 컴파일러 덕분에 인터프리어 언어도 겁나 빨라짐.\r
\r
특히 JS가 빨라진 이유는\r
\r
\`V8 엔진\` 같은 런타임이 자주 실행되는 코드를 감지해서 기계어로 바꿔줌 > 해당 코드는 엄청 빠르게 실행됨\r
\r
<br />\r
\r
\r
🎃 \`V8이 뭔데?\`\r
\r
---\r
\r
구글이 만든 JavaScript 엔진\r
\r
크롬 브라우저랑 Node.js에서 JS 코드 해석하고 실행해주는 핵심 엔진임\r
\r
### 💣💥 JIT 동작 흐름 (V8 기준)\r
\r
1. 코드 처음 실행 → **인터프리터(Ignition)** 가 해석하면서 실행\r
2. 반복적으로 자주 실행되는 코드(핫스팟) 감지\r
3. 이 코드를 **JIT 컴파일러(TurboFan)** 가 **기계어로 변환**해서 저장\r
4. 다음부턴 기계어로 된 그 코드로 바로 실행함 → 겁나 빠름\r
\r
<br />\r
\r
\r
📌 \`싱글 스레드지만 논 블로킹 I/O\`\r
\r
---\r
\r
JS는 \`싱글 스레드\`라서 **한 번에 한 작업만 처리 가능**한데 \`I/O 작업(네트워크, 파일)\`은 **논블로킹 방식으로 처리해서 여러 작업을 동시에 처리하는 것 처럼 보이게함** (멀티 스레드처럼 보이게 함)\r
\r
<br />\r
\r
🎃 \`싱글 스레드가 뭔데?\`\r
\r
---\r
\r
스레드 = 작업을 실행하는 흐름\r
\r
싱글 스레드는 말 그대로 한 줄기 흐름 → 즉 한 번에 한 작업만 처리 가능\r
\r
<br />\r
<br />\r
\r
\r
### 💣💥 근데 이렇게 하면 작업이 너무 느리잖아 !\r
\r
\`\`\`jsx\r
fetch("http://some-api.com") // 네트워크 요청\r
console.log("요청 보냄")\r
\`\`\`\r
\r
네트워크 요청이 끝날 때 까지 기다렸다 다른 작업들을 처리하면?\r
\r
그 동안 UI 멈추고 사용자 경험 개 구려짐\r
\r
그래서 논블로킹 I/O로 처리함\r
\r
> I/O 작업은 일단 맡겨두고 그동안 다른 작업 먼저 실행\r
나중에 결과 오면 콜백이나 promise로 해당 작업을 이어서 처리함\r
>\r
\r
### = 즉 **비동기 처리 방식**\r
\r
<br />\r
<br />\r
\r
\r
### 💣💥 이걸 가능하게 하는 구조는?\r
\r
JS 혼자선 안되고 **이벤트 루프 + Web APIs + 콜백 큐 라는 구조** 덕분임\r
\r
이걸 [Event Loop](https://velog.io/@doeezy/javascript-Event-Loop) 라고 부름\r
`;export{r as default};
